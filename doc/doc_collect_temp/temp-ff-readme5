This directory contains the C implementation of Metric-FF, as it was
used in the 3rd international planning competition. Build the planner
by typing

make

Which produces an executable named

Metric_FF

Usage should be self-explanatory. Running ff without any parameters
prints out a brief help information about the parameters that are
applicable, which basically come down to specifying the domain and
problem files.

Have fun,

Joerg Hoffmann



//**************************************************//

usage of Metric_FF:

OPTIONS   DESCRIPTIONS

-p <str>    path for operator and fact file
-a <str>    path for output file
-o <str>    operator file name
-f <str>    fact file name

-E          don't do enforced hill-climbing try before bestfirst

-g <num>    set weight w_g in w_g*g(s) + w_h*h(s) [preset: 0]
-h <num>    set weight w_h in w_g*g(s) + w_h*h(s) [preset: 0]

-O          switch on optimization expression (default is plan length)


/*******************************************************/

run() is the function which wrapped the main() function of Metric_FF

1.
Usage of Metric_FF(shell):

An example here:

./Metric_FF -p './' -a 'output.txt' -o 'domain.pddl' -f 'probBLOCKS-4-0.pddl'


Then, go to the current directory, find "output.txt",it contains the output of FF_X.

2.
Usage of Metric_FF.run()  ---->wrapped func

An example here:


>>import Metric_FF

>>argv = ['./','-a','output.txt','-o','domain.pddl','-f','probBLOCKS-4-0.pddl']

>>Metric_FF.run(argv)

Then, go to the current directory, find "output.txt",it contains the output of FF_X.
