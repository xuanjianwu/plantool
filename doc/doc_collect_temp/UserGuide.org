b#+TITLE: PlanTool Documentation
* Introduction
  Plantool wraps different planners into a python utility package. It aims to provide convenience for planning study and applications.
* Installation
* Planners
** Deterministic
   Deterministic planners
*** SGPlan
     - Usage for SGPlan: 
     #+BEGIN_SRC python
     >>> import sgplan
     >>> argv = ['sgplan', '-o', 'domain.pddl', '-f', 'problem.pddl']
     >>> sgplan.oldmain(argv)
     #+END_SRC
    
     - Instructions about arguments:

       | OPTIONS   | DESCRIPTIONS       |
       |-----------+--------------------|
       | -o <str>  | operator file name |
       | -f  <str> | fact file name     |


*** SatPlan2006
     - Usage for SATplan:  
       #+BEGIN_SRC python
       >>> import satplan  
       >>> argv=['bb','-o','domain.pddl','-f','problem.pddl','-l','5','-G','0','-C','2']  
       >>> satplan.run(argv)  
       #+END_SRC
     
     - Instructions about arguments:

       | OPTIONS     | DESCRIPTIONS                                                       |
       |-------------+--------------------------------------------------------------------|
       | -o <str>    | operator file name                                                 |
       | -f  <str>   | fact file name                                                     |
       | -p  <str>   | path for operator and fact file                                    |
       | -l  <num>   | goal layer for CNF                                                 |
       | -G <0 or 1> | (0) create CNF output or (1) build final solution                  |
       | -b  <str>   | CNF output file name                                               |
       | -t <0 or 1> | (1) CNF output includes only unary/binary clauses - others ignored |
       | -S  <str>   | Input Solution File Name (only when -G 1 is used)                  |
       | -F  <str>   | Final Output Solution File Name (only when -G 1 is used)           |
       | -V  <str>   | Variables File Name - list all variables (only when -G 1 is used)  |
       | -C          | CNF formula output (preset: -1); at layer <-l>                     |
       | -C 0        | none                                                               |
       | -C 1        | action-based                                                       |
       | -C 2        | gp-style action-based                                              |
       | -C 3        | gp-based                                                           |
       | -C 4        | thin gp-based                                                      |
      
   
*** HSP
    - Usage for HSP: 
      #+BEGIN_SRC python
      >>> import hsp
      >>> argv = ['hsp', '-o', 'domain.pddl', '-f', 'problem.pddl']
      >>> hsp.run(argv)
      #+END_SRC

    - Instructions about arguments:
 
      | OPTIONS   | DESCRIPTIONS                                                              |
      |-----------+---------------------------------------------------------------------------|
      | -o  <str> | operator file name                                                        |
      | -f  <str> | <str>    fact file name                                                   |
      | -a  <str> | <str>    Algorithm, either 'bfs' or 'gbfs'.                               |
      | -d  <str> | <str>    Search direction, either 'forward' or 'backward'.                |
      | -h  <str> | <str>    Heuristic function, one of 'h1plus', 'h1max', 'h2plus', 'h2max'. |
      | -v  <num> | <num>    Verbose level >= 0 (default is 1).                               |
      | -w  <float> | <float>   Float to weight the heuristic component of the cost             |


*** LAMA(planning seq-sat-lama)
    - Usage for LAMA:
      
      - First,run:
        #+BEGIN_SRC python
        >>> import translate
        >>> argv = ['domain.pddl','problem.pddl','l','result']
        >>> translate.main(argv)
        #+END_SRC
        
        | OPTIONS | DESCRIPTIONS                                                     |
        | l       | Use the landmark heuristic.                                      |
        | L       | Use preferred operators of the landmark heuristic.               |
        | f       | Use the FF heuristic.                                            |
        | F       | Use helpful actions ("preferred operators" of the FF heuristic). |


*** GP-CSP
    
    - Usage for GP-CSP
      #+BEGIN_SRC python
      >>> import gpcsp
      >>> argv = ['gpcsp', '-o', 'domain.pddl', '-f', 'problem.pddl']
      >>> gpcsp.run(argv)
      #+END_SRC

    - Instructions about arguments:
      | OPTIONS          | DESCRIPTIONS                                                     |
      | -h               | for this list                                                    |
      | -o <op file>     | to specify operator file                                         |
      | -f <fact file>   | to specify fact file                                             |
      | -t <integer>     | to specify a fixed number of time steps                          |
      | -i <info level>  | to specify info level 1 or 2 (default is 0)                      |
      | -O <option list> | to specify options you want                                      |
      | -M <integer>     | to specify alternative max nodes in a time step (default is 256) |
      | -d               | give default values to everything not specified                  |
      | -csp             | to run the CSP solver                                            |
      | -nopddl          | to take graphplan type problem description                       |
      | -ns <integer>    | to specify the maximum size of nogoods to learn                  |
      | -nr <integer>    | to specify the relevance-k value                                 |
      | -cutoff <long>   | to specify the cutoff limit for CSP solver                       |
      | -ldc             | to specify the use *ldc* var-order when solving the CSP          |
      | -dlc             | to specify the use of *dlc* var-order when solving the CSP       |
      | -switch          | switch to the other var-order when over the cutoff-limit         |

     - EXAMPLES
     Example1: gpcsp -o -nopddl fixit_ops -f fixit_facts1 -O IL -d
     Run original graphplan with original input format (not pddl).
     Example2: gpcsp -csp -ldc -cutoff 50000 -o a_ops.pddl -f a_facts.pddl
     Run GP-CSP with *ldc* variable ordering with cutoff-limit of 50000.
     Example3: gpcsp -csp -ns 100 -nr 5 -o fixit_ops.pddl -f fixit_ops.pddl
     Run GP-CSP with default variable ordering (dcl), with the maximum
     nogood size of 100, and will prune all irrelevant nogoods of size>5.
     Example4: gpcsp -csp -switch -cutoff 10000 -o ......
     Run GP-CSP with the cutoff-limit of 10000. Then switch from default
     var-ordering to ldc var-ordering.
     Example5: gpcsp -csp -ldc -cutoff 100 -switch -o ....
     Similar to Example4, but switch from *ldc* var-ordering to default
     var-ordering


*** Graphplan
    - Usage of Graphplan
      #+BEGIN_SRC python
      >>> import graphplan
      >>> argv = ['graphplan', '-o', 'domain.pddl', '-f', 'problem.pddl']
      >>> graphplan.run(argv)
      #+END_SRC
 
    - Instructions about arguments:

      | OPTIONS          | DESCRIPTIONS                                                     |
      |------------------+------------------------------------------------------------------|
      | -h               | for this list                                                    |
      | -o <op file>     | to specify operator file                                         |
      | -f <fact file>   | to specify fact file                                             |
      | -t <integer>     | to specify a fixed number of time steps                          |
      | -i <info level>  | to specify info level 1 or 2 (default is 0)                      |
      | -O <option list> | to specify options you want                                      |
      | -M <integer>     | to specify alternative max nodes in a time step (default is 256) |
      | ~-d~             | give default values to everything not specified                  |
      | ~-r~             | redirect output to specified files                               |

    
      *Note*: graphplan will prompt for '*-t*' and '*-O*' during execution
    
      - Options on *'-O'*
        
        'I' means do a quick check to toss out irrelevant initial
	      conditions.  See, for example, "rocket_factsBIG"

  	    'L' is a speedup using the reasoning: if I have m goals with
  	    the property that I can create at most one of them in a
  	    given time step, then I won't be able to find a plan of
  	    fewer than m time-steps.  For instance, in a TSP problem
  	    if there are m places still to be visited, then it knows
  	    it will fail if the current time is < m.
  	    NOTE: this option currently interferes with graphplan's
  	    completeness check.

	      'S' is a speedup using the reasoning: if I have a set of goals
  	    at time t, and I've already failed on a SUBSET of these
  	    goals at time t, then we're going to fail.  Unfortunately,
  	    it seems computationally difficult to make this check, so
  	    really what Graphplan does with this option is check
  	    whether it has previously failed on some subset of size
  	    ONE SMALLER than the current set. 

        'E' turns off some of graphplan's smarts.

**** Update <2017-05-24 Wed>
     - Adding redirection of stdout to other files, the source would be '-r' flag, python would be '-out'
     

*** FF
    run() is the function which wrapped the main() function of Metric_FF
**** Metric-FF
   
     - Usage of Metric_FF(shell):
     
       A example here:

       #+BEGIN_SRC sh
       ./Metric_FF -p './' -o 'domain.pddl' -f 'probBLOCKS-4-0.pddl'
       #+END_SRC

     - Usage of Metric_FF.run()  ---->wrapped func

       A example here:

       #+BEGIN_SRC python
       >>>import Metric_FF
       >>>argv = ['./','-o','domain.pddl','-f','probBLOCKS-4-0.pddl']
       >>>Metric_FF.run(argv)
       #+END_SRC

     - usage of Metric_FF:

 
       | OPTIONS  | DESCRIPTIONS                                               |
       | -p <str> | path for operator and fact file                            |
       | -a <str> | path for output file                                       |
       | -o <str> | operator file name                                         |
       | -f <str> | fact file name                                             |
       | -E       | don't do enforced hill-climbing try before bestfirst       |
       | -g <num> | set weight w_g in w_g*g(s) + w_h*h(s) [preset: 0]          |
       | -h <num> | set weight w_h in w_g*g(s) + w_h*h(s) [preset: 0]          |
       | -O       | switch on optimization expression (default is plan length) |


**** Seq_Sat_FF

     - Usage of Seq_Sat_FF(shell):

       A example here:

       #+BEGIN_SRC sh
       ./Seq_Sat_FF -p './' -o 'domain.pddl' -f 'probBLOCKS-4-0.pddl'       
       #+END_SRC

     - Usage of Seq_Sat_FF.run()  ---->wrapped func

     A example here:

     #+BEGIN_SRC python
     >>>import Seq_Sat_FF
     >>>argv = ['./','-o','domain.pddl','-f','probBLOCKS-4-0.pddl']
     >>>Seq_Sat_FF.run(argv)
     #+END_SRC

     |  OPTIONS | DESCRIPTIONS                                                         |
     | -a <str> | path for output file                                                 |
     | -p <str> | path for operator and fact file                                      |
     | -o <str> | operator file name                                                   |
     | -f <str> | fact file name                                                       |
     |       -E | don't do enforced hill-climbing try before bestfirst                 |
     | -g <num> | set weight w_g in w_g*g(s) + w_h*h(s) [preset: 0]                    |
     | -h <num> | set weight w_h in w_g*g(s) + w_h*h(s) [preset: 0]                    |
     |       -O | switch on optimization expression (default is plan length)           |
     |       -S | Use set-additive heuristic rather than duplicate-eliminated additive |
     |       -T | Use TSP heuristic                                                    |
     |       -H | Use standard additive heuristic with wA*                             |
     |       -C | Competition output                                                   |
     | -i <num> | run-time information level( preset: 1 )                              |
     |        0 | only times                                                           |
     |        1 | problem name, planning process infos                                 |
     |      101 | parsed problem data                                                  |
     |      102 | cleaned up ADL problem                                               |
     |      103 | collected string tables                                              |
     |      104 | encoded domain                                                       |
     |      105 | predicates inertia info                                              |
     |      106 | splitted initial state                                               |
     |      107 | domain with Wff s normalized                                         |
     |      108 | domain with NOT conds translated                                     |
     |      109 | splitted domain                                                      |
     |      110 | cleaned up easy domain                                               |
     |      111 | unaries encoded easy domain                                          |
     |      112 | effects multiplied easy domain                                       |
     |      113 | inertia removed easy domain                                          |
     |      114 | easy action templates                                                |
     |      115 | cleaned up hard domain representation                                |
     |      116 | mixed hard domain representation                                     |
     |      117 | final hard domain representation                                     |
     |      118 | reachability analysis results                                        |
     |      119 | facts selected as relevant                                           |
     |      120 | final domain and problem representations                             |
     |      121 | normalized expressions representation                                |
     |      122 | LNF: translated subtractions representation                          |
     |      123 | summarized effects LNF  representation                               |
     |      124 | encoded LNF representation                                           |
     |      125 | connectivity graph                                                   |
     |      126 | fixpoint result on each evaluated state                              |
     |      127 | 1P extracted on each evaluated state                                 |
     |      128 | H set collected for each evaluated state                             |
     | -d <num> | switch on debugging                                                  |
   
     
**** FF_X

     - Usage of Seq_Sat_FF(shell):

     A example here:

     #+BEGIN_SRC sh
     ./Seq_Sat_FF -p './' -o 'domain.pddl' -f 'probBLOCKS-4-0.pddl'
     #+END_SRC

     - Usage of Seq_Sat_FF.run()  ---->wrapped func

     A example here:

     #+BEGIN_SRC python
     >>>import Seq_Sat_FF
     >>>argv = ['./','-o','domain.pddl','-f','probBLOCKS-4-0.paddle']
     >>>Seq_Sat_FF.run(argv)
     #+END_SRC

        
     |  OPTIONS | DESCRIPTIONS                              |
     | -p <str> | path for operator and fact file           |
     | -a <str> | path for output file                      |
     | -o <str> | operator file name                        |
     | -f <str> | fact file name                            |
     | -i <num> | run-time information level( preset: 1 )   |
     |        0 | only times                                |
     |        1 | problem name, planning process infos      |
     |      101 | parsed problem data                       |
     |      102 | cleaned up ADL problem                    |
     |      103 | collected string tables                   |
     |      104 | encoded domain                            |
     |      105 | predicates inertia info                   |
     |      106 | splitted initial state                    |
     |      107 | domain with Wff s normalized              |
     |      108 | domain with NOT conds translated          |
     |      109 | splitted domain                           |
     |      110 | cleaned up easy domain                    |
     |      111 | unaries encoded easy domain               |
     |      112 | effects multiplied easy domain            |
     |      113 | inertia removed easy domain               |
     |      114 | easy action templates                     |
     |      115 | cleaned up hard domain representation     |
     |      116 | mixed hard domain representation          |
     |      117 | final hard domain representation          |
     |      118 | reachability analysis results             |
     |      119 | facts selected as relevant                |
     |      120 | final domain and problem representations  |
     |      121 | connectivity graph                        |
     |      122 | fixpoint result on each evaluated state   |
     |      123 | 1P extracted on each evaluated state      |
     |      124 | H set collected for each evaluated state  |
     |      125 | False sets of goals <GAM>                 |
     |      126 | detected ordering constraints leq_h <GAM> |
     |      127 | the Goal Agenda <GAM>                     |
     | -d <num> | switch on debugging                       |


**** Cont_FF

     - Usage of Cont_FF(shell):

     A example here:

     #+BEGIN_SRC sh
     ./Cont_FF -p './' -o 'domain.pddl' -f 'probBLOCKS-4-0.pddl'     
     #+END_SRC


     - Usage of Cont_FF.run()  ---->wrapped func

     A example here:

     #+BEGIN_SRC python
     >>>import Cont_FF
     >>>argv = ['./','-o','domain.pddl','-f','probBLOCKS-4-0.pddl']
     >>>Cont_FF.run(argv)
     #+END_SRC

     | OPTIONS  | DESCRIPTIONS                                                                          |
     | -p <str> | path for operator and fact file                                                       |
     | -x <str> | path for output file                                                                  |
     | -o <str> | operator file name                                                                    |
     | -f <str> | fact file name                                                                        |
     | -h <num> | heuristic function to be used (preset: 3) (explanation: see journal paper)            |
     | 0        | implication graph for path to s plus RPG, incomplete check for leafs implication by I |
     | 1        | implication graph for path to s plus RPG, complete check for leafs implication by I   |
     | 2        | implication graph for RPG, complete check for leafs implication by phi(s)             |
     | 3        | FF heuristic assuming that all unknowns are true                                      |
     | -a <num> | search algorithm (preset: 1)                                                          |
     | 0        | AO* search                                                                            |
     | 1        | greedy AO* search                                                                     |
     | -m <num> | search mode (preset: 1)                                                               |
     | 0        | observations added                                                                    |
     | 1        | observations max'ed                                                                   |
     | 2        | average of observations                                                               |
     | -G       | use giveup action                                                                     |
     | -g <num> | Giveup action cost (preset: 100000)                                                   |
     | -I       | partial plan configuration (shortcut for -G -a 0 -m 2 -h 3)                           |
     | -w <num> | leaf cost weight in AO* (preset: 1)                                                   |
     | -H       | helpful actions pruning ON                                                            |
     | -s       | stagnating paths check level (preset: 2)                                              |
     | 0        | OFF                                                                                   |
     | 1        | only against direct successor                                                         |
     | 2        | against all ancestors                                                                 |
     | -M       | manual search control                                                                 |
     | -d <num> | debug info level (preset 0)                                                           |
     | -R       | debug relax.c                                                                         |
     | -A       | debug search.c                                                                        |
     | -T       | debug state_transitions.c                                                             |
     | -P       | debug repeated_states.c                                                               |



**** Conf_FF

     - Usage of Conf_FF(shell):

       A example here:
     
       #+BEGIN_SRC sh
       ./Conf_FF -p './' -a 'output.txt' -o 'domain.pddl' -f 'probBLOCKS-4-0.pddl'
       #+END_SRC

       Then, go to the current directory, find "output.txt",it contains the output of Conf_FF.

     - Usage ofConf_FF.run()  ---->wrapped func

       A example here:
       
       #+BEGIN_SRC python
       >>import Conf_FF
       >>argv = ['./','-a','output.txt','-o','domain.pddl','-f','probBLOCKS-4-0.pddl']
       >>Conf_FF.run(argv)
       #+END_SRC
       
       Then, go to the current directory, find "output.txt",it contains the output of FF_X.

     | OPTIONS  | DESCRIPTIONS                                                                          |
     | -p <str> | path for operator and fact file                                                       |
     | -a <str> | path for output file                                                                  |
     | -o <str> | operator file name                                                                    |
     | -f <str> | fact file name                                                                        |
     | -h <num> | heuristic function to be used (preset: 1) (explanation: see journal paper)            |
     | 0        | implication graph for path to s plus RPG, incomplete check for leafs implication by I |
     | 1        | implication graph for path to s plus RPG, complete check for leafs implication by I   |
     | 2        | implication graph for RPG, complete check for leafs implication by phi(s)             |
     | -E       | EHC run OFF                                                                           |
     | -H       | helpful actions OFF                                                                   |
     | -S       | stagnating paths check OFF                                                            |
     | -D       | full repeated (dominated) states check OFF                                            |
     | -B       | run Best-first search in breadth-first style                                          |
     | -M       | manual search control                                                                 |
     | -d <num> | debug info level (preset 0)                                                           |
     | -R       | debug relax.c                                                                         |
     | -A       | debug search.c                                                                        |
     | -T       | debug state_transitions.cpp                                                           |
     

**** FF-v2.3

     - Usage of FF_2_3(shell):

     A example here:

     #+BEGIN_SRC sh
     ./FF_2_3 -p './' -o 'domain.pddl' -f 'probBLOCKS-4-0.pddl'     
     #+END_SRC


     - Usage of FF_2_3.run()

     A example here:

     #+BEGIN_SRC python
     >>>import FF_2_3
     >>>argv = ['./','-o','domain.pddl','-f','probBLOCKS-4-0.pddl']
     >>>FF_2_3.run(argv)
     #+END_SRC
     
     - usage of FF_2_3:

       |  OPTIONS | DESCRIPTIONS                              |
       | -p <str> | path for operator and fact file           |
       | -a <str> | path for output file                      |
       | -o <str> | operator file name                        |
       | -f <str> | fact file name                            |
       | -i <num> | run-time information level( preset: 1 )   |
       |        0 | only times                                |
       |        1 | problem name, planning process infos      |
       |      101 | parsed problem data                       |
       |      102 | cleaned up ADL problem                    |
       |      103 | collected string tables                   |
       |      104 | encoded domain                            |
       |      105 | predicates inertia info                   |
       |      106 | splitted initial state                    |
       |      107 | domain with Wff s normalized              |
       |      108 | domain with NOT conds translated          |
       |      109 | splitted domain                           |
       |      110 | cleaned up easy domain                    |
       |      111 | unaries encoded easy domain               |
       |      112 | effects multiplied easy domain            |
       |      113 | inertia removed easy domain               |
       |      114 | easy action templates                     |
       |      115 | cleaned up hard domain representation     |
       |      116 | mixed hard domain representation          |
       |      117 | final hard domain representation          |
       |      118 | reachability analysis results             |
       |      119 | facts selected as relevant                |
       |      120 | final domain and problem representations  |
       |      121 | connectivity graph                        |
       |      122 | fixpoint result on each evaluated state   |
       |      123 | 1P extracted on each evaluated state      |
       |      124 | H set collected for each evaluated state  |
       |      125 | False sets of goals <GAM>                 |
       |      126 | detected ordering constraints leq_h <GAM> |
       |      127 | the Goal Agenda <GAM>                     |
       | -d <num> | switch on debugging                       |


*** IPP
  - Usage of IPP
    #+BEGIN_SRC python
    >>> import ipp
    >>> argv = ['ipp', '-o', 'domain.pddl', '-f', 'problem.pddl']
    >>> ipp.run(argv)
    #+END_SRC

  - Instructions about arguments:

    | OPTIONS  | DESCRIPTIONS                                                     |
    | -p <str> | path for operator and fact file                                  |
    | -o <str> | operator file name                                               |
    | -f <str> | fact file name                                                   |
    | -i <num> | run-time information level( preset: 1 )                          |
    | ~0~      | nothing                                                          |
    | ~1~      | info on action number, graph, search and plan                    |
    | ~2~      | 1 + info on problem constants, types and predicates              |
    | ~3~      | 1 + 2 + loaded operators, initial and goal state                 |
    | ~4~      | 1 + predicates and their inertia status                          |
    | ~5~      | 1 + 4 + goal state and operators with unary inertia encoded      |
    | ~6~      | 1 + actions, initial and goal state after expansion of variables |
    | ~7~      | 1 + facts selected as relevant to the problem                    |
    | ~8~      | 1 + final domain representation                                  |
    | ~> 100~  | 1 + various debugging information                                |
    | -W       | write complete graph to text files after planning                |
    | -w <str> | specify name for graph output files( preset: graph )             |
    | -m <num> | build graph up to level <num> without search                     |
    | -S       | don't do complete subset test in memoization                     |
        
    
** Learning
** Uncertainty
  
